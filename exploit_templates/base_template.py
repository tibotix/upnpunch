from http.server import BaseHTTPRequestHandler
from string import Template
import random

class InvalidRequest(Exception):
    pass


class BaseUPNPResponseHandler():
    def __init__(self, template_ip, template_port, session_usn):
        self.template_ip = template_ip
        self.template_port = template_port
        self.session_usn = session_usn

    def handle(self, request, addr):
        return None


class BaseUPNPRequestHandler():
    allowed_methods = ["M-SEARCH", "NOTIFY"]
    needed_headers = []

    def __init__(self, template_ip, template_port, session_usn):
        self.template_ip = template_ip
        self.template_port = template_port
        self.session_usn = session_usn

    def handle(self, request, addr):
        self.request_headers = dict(request.headers)
        self.request = request
        self.addr = addr

        try:
            self._validate_request()
            return self._handle()
        except InvalidRequest as e:
            return None

    def _validate_request(self):
        self._validate_method()
        self._validate_headers()

    def _validate_method(self):
        if(self.request.method not in self.allowed_methods):
            raise InvalidRequest()

    def _validate_headers(self):
        for header in self.needed_headers:
            if(header not in self.request_headers):
                raise InvalidRequest()


    def _handle(self):
        return None



class BaseHTTPHandler(BaseHTTPRequestHandler):
    GET_routes = {}
    POST_routes = {}

    def handle(self):
        self.local_ip, self.local_port = self.server.server_address
        super().handle()

    def do_GET(self):
        for route in self.GET_routes:
            if(self.path == route):
                self.GET_routes[route](self)

    def do_POST(self):
        for route in self.POST_routes:
            if(self.path == route):
                self.POST_routes[route](self)

    def send_file(self, file_path, mode="r", **kwargs):
        f = open(file_path, mode)
        t = Template(f.read())
        f.close()
        self.wfile.write(t.substitute(kwargs).encode("utf-8"))


class BaseTemplate():
    HTTPHandler = BaseHTTPHandler
    UPNPRequestHandler = BaseUPNPRequestHandler
    UPNPResponseHandler = BaseUPNPResponseHandler
    HTTP_PORT = -1
    SESSION_USN = "2fac1234-31f8-11b4-a222-08002b34c003"

    @classmethod
    def random_usn(cls):
        return cls.rand_str(8) + "-" + cls.rand_str(4) + "-" + cls.rand_str(4) + "-" + cls.rand_str(4) + "-" + cls.rand_str(12)

    @classmethod
    def rand_str(cls, k):
        chars = "abcdef"
        digits = "0123456789"
        return "".join(random.choices(chars+digits, k=k))
